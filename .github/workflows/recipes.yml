name: Recipes
on: [push, pull_request]

jobs:
  html:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: create html
        run: |
          echo '<marquee style="width: 100vw; height: 100vh; background: black; color: white">Hello, cruel world</marquee>' > index.html
      - uses: actions/upload-artifact@v4
        with:
          name: html
          path: index.html
  vitest:
    needs: html
    if: ${{ !contains(github.event.head_commit.message, 'debug=html') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          git ls-files | xargs rm && echo '*' >> .gitignore
          rm -rf node_modules
          rm -rf test && mkdir test
          npm init -y
          npm install vitest @vitest/ui @vitest/coverage-v8 @types/node@^20.0.0 --save-dev
          cat package.json
          echo 'export const add = (a: number, b: number) => a + b' >> calc.ts
          echo 'export const addBad = (a: number, b: number) => a + b + 1' >> calc.ts
          echo 'export const sub = (a: number, b: number) => a - b' >> calc.ts
          echo 'import {test, expect} from "vitest"' >> test/adding.test.ts
          echo 'import {add, addBad} from "../calc"' >> test/adding.test.ts
          echo 'test("add well", () => expect(add(1, 1)).toEqual(2))' >> test/adding.test.ts
          echo 'test("add badly", () => expect(addBad(1, 1)).toEqual(2))' >> test/adding.test.ts
      - name: run tests
        run: |
          npx vitest --coverage --coverage.reportOnFailure --reporter html run || echo failed
          ls -R
      - uses: actions/upload-artifact@v4
        with:
          name: vitest
          path:
            html
            coverage
  playwright:
    needs: html
    if: ${{ !contains(github.event.head_commit.message, 'debug=html') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          git ls-files | xargs rm && echo '*' >> .gitignore
          rm -rf test rm playwright.config.ts && mkdir test
          npm install @playwright/test --save-dev
          echo 'export const add = (a: number, b: number) => a + b' >> calc.ts
          echo 'export const addBad = (a: number, b: number) => a + b + 1' >> calc.ts
          echo 'export const sub = (a: number, b: number) => a - b' >> calc.ts
          echo 'import {test, expect} from "@playwright/test"' >> test/adding.test.ts
          echo 'import * as calc from "../calc"' >> test/adding.test.ts
          echo 'test("add well", () => expect(calc.add(1, 1)).toEqual(2))' >> test/adding.test.ts
          echo 'test("add badly", () => expect(calc.addBad(1, 1)).toEqual(2))' >> test/adding.test.ts
          echo 'test("add snapshot", () => expect(calc.add(1, 1)).toMatchSnapshot())' >> test/adding.test.ts
      - name: run tests
        run: npx playwright test test/adding.test.ts --reporter html || echo failed
      - uses: actions/upload-artifact@v4
        with:
          name: playwright
          path: playwright-report
  website:
    needs: html
    if: ${{ !contains(github.event.head_commit.message, 'debug=html') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p website
      - name: setup
        run: |
          git ls-files | xargs rm && echo '*' >> .gitignore
          npm create astro@latest -- demosite --template starlight --yes
          export BASE_PATH="/artifact/view/$GITHUB_REPOSITORY/run/$GITHUB_RUN_ID.$GITHUB_RUN_ATTEMPT/website"
          echo "BASE_PATH=$BASE_PATH"
          sed -i "s|integrations|base: '$BASE_PATH', integrations|g" demosite/astro.config.mjs
          sed -i "s|link: /guides|link: $BASE_PATH/guides|g" demosite/src/content/docs/index.mdx
      - run: npm run build
        working-directory: demosite
      - uses: actions/upload-artifact@v4
        with:
          name: website
          path: demosite/dist
  eslint:
    needs: html
    if: ${{ !contains(github.event.head_commit.message, 'debug=html') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          git ls-files | xargs rm && echo '*' >> .gitignore
          npm install eslint eslint-plugin-mmkal @eslint/config-inspector --save-dev
          echo "module.exports = require('eslint-plugin-mmkal').recommendedFlatConfigs" >> eslint.config.js
      - name: build eslint inspection report
        run: |
          BASE_PATH="/artifact/view/$GITHUB_REPOSITORY/run/$GITHUB_RUN_ID.$GITHUB_RUN_ATTEMPT/eslint"
          npx @eslint/config-inspector build --base $BASE_PATH
      - uses: actions/upload-artifact@v4
        with:
          name: eslint
          path: .eslint-config-inspector
          include-hidden-files: true
          if-no-files-found: error

  jest:
    needs: html
    if: ${{ !contains(github.event.head_commit.message, 'debug=html') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          git ls-files | xargs rm && echo '*' >> .gitignore
          echo 'module.exports.add = (a, b) => a + b' >> calc.js
          echo 'module.exports.addBadly = (a, b) => a + b + 1' >> calc.js
          mkdir -p test
          echo 'const {add, addBadly} = require("../calc")' >> test/adding.test.js
          echo 'test("add well", () => expect(add(1, 1)).toEqual(2))' >> test/adding.test.js
          echo 'test("add badly", () => expect(addBadly(1, 1)).toEqual(2))' >> test/adding.test.js
          echo 'const {add} = require("../calc")' >> test/snaps.test.js
          echo 'test("bad snapshot", () => expect({foo: add(1, 1)}).toMatchInlineSnapshot(`{"foo": 3}`))' >> test/snaps.test.js
          echo 'module.exports = {
            testRegex: /test\/.*/.source,
            reporters: ["default", ["jest-html-reporters", {publicPath: "./report"}]],
            coverageDirectory: "report",
          }' >> jest.config.js
          ls
          ls test
          npm install jest jest-html-reporters --save-dev
      - name: run tests
        run: npx jest --coverage || echo failed
      - uses: actions/upload-artifact@v4
        with:
          name: jest
          path: |
            report
            coverage
  ava:
    needs: html
    if: ${{ !contains(github.event.head_commit.message, 'debug=html') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          git ls-files | xargs rm && echo '*' >> .gitignore
          npm init -y
          npm install ava tap-html
          echo 'exports.add = (a, b) => a + b' > calc.js
          echo 'exports.addBad = (a, b) => a + b + 1' >> calc.js
          mkdir -p test
          echo 'const {add, addBad} = require("../calc")' >> test/adding.test.js
          echo 'const test = require("ava")' >> test/adding.test.js
          echo 'test("add well", t => t.is(add(1, 1), 2))' >> test/adding.test.js
          echo 'test("add badly", t => t.is(addBad(1, 1), 2))' >> test/adding.test.js
      - name: run tests
        run: npx ava --tap | npx tap-html --out output.html || echo failed
      - uses: actions/upload-artifact@v4
        with:
          name: ava
          path: output.html
  pytest:
    needs: html
    if: ${{ !contains(github.event.head_commit.message, 'debug=html') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          git ls-files | xargs rm && echo '*' >> .gitignore
          echo '
          def add(a, b):
            return a + b
          def addBad(a, b):
            return a + b + 1

          def test_add_well():
            assert add(1, 1) == 2
          def test_add_badly():
            assert addBad(1, 1) == 2
          ' >> test.py
          pip install pytest --break-system-packages
          pip install pytest-html --break-system-packages
      - name: run tests
        run: pytest test.py --html report/index.html || echo failed
      - uses: actions/upload-artifact@v4
        with:
          name: pytest
          path: report
  mocha:
    needs: html
    if: ${{ !contains(github.event.head_commit.message, 'debug=html') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          git ls-files | xargs rm && echo '*' >> .gitignore
          npm install mocha --save-dev
          echo 'exports.add = (a, b) => a + b' >> calc.js
          echo 'exports.addBad = (a, b) => a + b + 1' >> calc.js
          echo 'exports.sub = (a, b) => a - b' >> calc.js
          mkdir -p test
          echo 'const assert = require("assert")' >> test/adding.test.js
          echo 'const {add, addBad} = require("../calc")' >> test/adding.test.js
          echo 'it("adds well", () => assert.strictEqual(add(1, 1), 2))' >> test/adding.test.js
          echo 'it("adds badly", () => assert.strictEqual(addBad(1, 1), 2))' >> test/adding.test.js
      - run: npx mocha --reporter doc > output.html || echo failed
      - uses: actions/upload-artifact@v4
        if: always()
        with:
            name: mocha
            path: output.html
  pdf:
    needs: html
    if: ${{ !contains(github.event.head_commit.message, 'debug=html') }}
    name: Pee Dee Eff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          git ls-files | xargs rm && echo '*' >> .gitignore
          npm install pdfkit
          echo '
            const fs = require("fs")
            const PDFDocument = require("pdfkit")

            const doc = new PDFDocument()
            doc.pipe(fs.createWriteStream("output.pdf"))

            // draw some text
            doc.fontSize(25).text("Here are some vector graphics...", 100, 80)

            // some vector graphics
            doc.save().moveTo(100, 150).lineTo(100, 250).lineTo(200, 250).fill("#FF3300")

            doc.circle(280, 200, 50).fill("#6600FF")

            // an SVG path
            doc
              .scale(0.6)
              .translate(470, 130)
              .path("M 250,75 L 323,301 131,161 369,161 177,301 z")
              .fill("red", "even-odd")
              .restore()

            // and some justified text wrapped into columns
            const lorem =
              "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
            doc.text("And here is some wrapped text...", 100, 300).font("Times-Roman", 13).moveDown().text(lorem, {
              width: 412,
              align: "justify",
              indent: 30,
              columns: 2,
              height: 300,
              ellipsis: true,
            })

            // end and display the document in the iframe to the right
            doc.end()
          ' > create-pdf.js
      - name: create pdf
        run: node create-pdf.js
      - uses: actions/upload-artifact@v4
        with:
          name: pdf
          path: output.pdf
  go:
    needs: html
    if: ${{ !contains(github.event.head_commit.message, 'debug=html') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        # https://go.dev/doc/tutorial/add-a-test
        run: |
          git ls-files | xargs rm && echo '*' >> .gitignore
          go mod init example.com/calc
          go get github.com/vakenbolt/go-test-report
          go install github.com/vakenbolt/go-test-report

          echo 'package calc

          func Add(a, b int) int {
              return a + b
          }

          func AddBadly(a, b int) int {
              return a + b + 1
          }' > calc.go

          echo 'package calc

          import ("testing")

          func TestAddWell(t *testing.T) {
              actual := Add(1, 1)
              expected := 2
              if actual != expected {
                  t.Errorf("Result was incorrect, got: %d, want: %d.", actual, expected)
              }
          }

          func TestAddBadly(t *testing.T) {
              actual := AddBadly(1, 1)
              expected := 2
              if actual != expected {
                  t.Errorf("Result was incorrect, got: %d, want: %d.", actual, expected)
              }
          }' > calc_test.go
      - run: ls ~/go/bin
      - name: run tests
        run: go test -json | ~/go/bin/go-test-report || echo failed
      - uses: actions/upload-artifact@v4
        with:
          name: go
          path: test_report.html
  custom_action:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: create html
        run: |
          echo '<blink style="width: 100vw; height: 100vh; background: black; color: white">Hello, cruel world</blink>' > index.html
      - uses: ./upload
        with:
          name: custom_action
          path: index.html
