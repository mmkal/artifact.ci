import {initTRPC} from '@trpc/server'
import AdmZip from 'adm-zip'
import {Octokit} from 'octokit'
import * as path from 'path'
import {z} from 'zod'
import {getInstallationOctokit} from '../app/github/events/route'
import {Id, client, sql} from '../db'

const t = initTRPC.create()

export const router = t.router
export const publicProcedure = t.procedure

export const appRouter = router({
  startArtifactProcessing: publicProcedure
    .input(
      z.object({
        artifactId: Id('artifact'), //
      }),
    )
    .subscription(async function* ({input}) {
      console.log(`starting ${input.artifactId} <<<<<<<<`)
      const artifact = await client.one(sql<queries.Artifact>`
        select a.*, gi.github_id as installation_github_id
        from artifacts a
        join github_installations gi on gi.id = a.installation_id
        where a.id = ${input.artifactId}
      `)
      console.log(`found ${input.artifactId} <<<<<<<<`)
      yield {
        stage: 'found' as const,
        message: `Got artifact ${artifact?.name}`,
        progress: 5,
      }

      console.log(`octokit ${input.artifactId}  <<<<<<<<`)
      const octokit = await getInstallationOctokit(artifact.installation_github_id)
      console.log(`got octokit ${input.artifactId} <<<<<<<<`)
      const zipRes = await octokit.request(`GET ${artifact.download_url}`, {
        mediaType: {format: 'zip'},
      })
      console.log(`got zip ${input.artifactId} <<<<<<<<`)
      yield {
        stage: 'downloaded' as const,
        message: `Downloaded ${path.basename(artifact.download_url)} ${artifact.name}`,
        progress: 10,
      }
      console.log(`parsed zip ${input.artifactId} <<<<<<<<`)
      const arrayBuffer = z.instanceof(ArrayBuffer).parse(zipRes.data)
      const zip = new AdmZip(Buffer.from(arrayBuffer))
      const entries = zip.getEntries()
      console.log(`got entries ${entries.length} <<<<<<<<`)
      yield {
        stage: 'extracted' as const,
        message: `Extracted ${entries.length} entries from ${artifact.name}`,
        progress: 10 + 90 / (entries.length + 2),
      }

      for (const [index] of entries.entries()) {
        yield {
          stage: 'uploading' as const,
          message: `Uploading file ${index + 1} of ${entries.length}`,
          progress: 10 + (index + 2) * (90 / (entries.length + 2)),
        }
        await new Promise(r => setTimeout(r, 20))
      }

      yield {
        stage: 'complete' as const,
        message: 'Fuckken done',
        progress: 100,
      }
      //   yield {stage: 'download', progress: 0}
      //   await new Promise(r => setTimeout(r, 1000))
      //   yield {stage: 'download', progress: 50}
      //   await new Promise(r => setTimeout(r, 1000))
      //   yield {stage: 'download', progress: 100}

      //   await new Promise(r => setTimeout(r, 500))

      //   yield {stage: 'extract', progress: 0}
      //   await new Promise(r => setTimeout(r, 1000))
      //   yield {stage: 'extract', progress: 50}
      //   await new Promise(r => setTimeout(r, 1000))
      //   yield {stage: 'extract', progress: 100}

      //   await new Promise(r => setTimeout(r, 500))

      //   yield {stage: 'upload', progress: 0}
      //   await new Promise(r => setTimeout(r, 1000))
      //   yield {stage: 'upload', progress: 50}
      //   await new Promise(r => setTimeout(r, 1000))
      //   yield {stage: 'upload', progress: 100}
    }),
})

const loadZip = async (octokit: Octokit, url: string) => {
  const zipRes = await octokit.request(`GET ${url}`, {
    mediaType: {format: 'zip'},
  })
  const arrayBuffer = z.instanceof(ArrayBuffer).parse(zipRes.data)
  const zip = new AdmZip(Buffer.from(arrayBuffer))
  return {zip, entries: zip.getEntries()}
}

export type AppRouter = typeof appRouter

export declare namespace queries {
  // Generated by @pgkit/typegen

  /** - query: `select a.*, gi.github_id as installation... [truncated] ...i.id = a.installation_id where a.id = $1` */
  export interface Artifact {
    /** column: `public.artifacts.id`, not null: `true`, regtype: `prefixed_ksuid` */
    id: import('~/db').Id<'artifacts'>

    /** column: `public.artifacts.repo_id`, not null: `true`, regtype: `prefixed_ksuid` */
    repo_id: string

    /** column: `public.artifacts.name`, not null: `true`, regtype: `text` */
    name: string

    /** column: `public.artifacts.created_at`, not null: `true`, regtype: `timestamp with time zone` */
    created_at: Date

    /** column: `public.artifacts.updated_at`, not null: `true`, regtype: `timestamp with time zone` */
    updated_at: Date

    /** column: `public.artifacts.download_url`, not null: `true`, regtype: `text` */
    download_url: string

    /** column: `public.artifacts.github_id`, not null: `true`, regtype: `bigint` */
    github_id: number

    /** column: `public.artifacts.installation_id`, not null: `true`, regtype: `prefixed_ksuid` */
    installation_id: string

    /** column: `public.github_installations.github_id`, not null: `true`, regtype: `bigint` */
    installation_github_id: number
  }
}
